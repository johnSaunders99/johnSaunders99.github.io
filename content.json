{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"comment","text":"","link":"/comment/index.html"}],"posts":[{"title":"C and C++ 路线","text":"C++语言机制多，粒度细 “造轮子” 啥都能干，但 都 只 能 从 底 层 做服务端开发较多java 企业化的后台、客户端开发语言第一：《C Primer Plus》(第5版）中文版 买新版第二：《C++Primer》中文版第三：《C++ Primer Plus》 比第二更适合零基础第四：《Java编程思想》第五：《Java核心技术》卷1卷2第六：《Python核心编程》第七：《Python编程从入门到实战》第八：《Go语言实战》 or《Go In Action》第九：《算法导论》 不适合初学者第十：《算法》第四版 红砖第十一：《TCP/IP详解》第十二：《计算机网络 自顶向下》第十三：《私房菜》 工具书第十四：《Unix环境高级编程》第十五：《Spring实战》第十六：《Spring Boot实战》第十七：《Spring技术内幕》 很难第十八：《MySQL必知必会》 涵盖 《SQL必知必会》的内容第十九：《高性能MySQL》第二十：《重构 改善既有代码的设计》 需要一些经验，拔高内容 学习语言：高强度学习编程的基础四大件：比语言本身重要数据结构和算法学完之后要刷leetcode（算法小红砖 剑指offer）字符串 链表 二叉树 堆栈 队列 哈希 查找 排序 动态 规划 计算机网络 tcp/ip 协议栈（tcp/ip详解） 操作系统进程和线程 并发 和锁 内存分布调度等等 （深入理解操作系统） 设计模式单例 工厂 代理 策略模式 模版方法（大话设计模式） 实践Linux操作系统掌握 shell编程 脚本等等编译/调试工具 Linux平台上 gcc 以及makefile（跟我一起写makefile）要会写 gdb调试工具 Linux系统编程 ！多线程编程 网络编程（unix环境高级编程）（Linux高性能服务器编程）（posix多线程程序设计）","link":"/2020/07/15/C-and-C-%E8%B7%AF%E7%BA%BF/"},{"title":"live2d放入hexo系 blog","text":"下载你喜欢的Live2D模型 将包解压后丢到node_modules里面执行下面两句。npm uninstall hexo-helper-live2dnpm install –save hexo-helper-live2d 在hexo（不是主题内的config）内的config.yml内添加下面的代码1234567891011121314151617181920212223##live2d config in bloglive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ #以上都是生成后的目录，随便你设定 tagMode: false debug: false model: use: live2d-widget-model-hijiki #这里写你node_modules内live2d的包名。或者以下三种形式都可以。 # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 150 height: 300 mobile: show: false react: opacity: 0.7 修改上面两个就好了，然后再deploy就ok。当然要注意一下，这个用的是pose不是physics，如果是其他系统下的live2d用physics就要自己改一下physics内的变量命名了。","link":"/2019/07/05/live2d%E6%94%BE%E5%85%A5blog/"},{"title":"hexo分类问题解决","text":"##直入主题解决有can not GET/xxx报错进不去类似于about和document的页面问题 先去看看部署以后的github上面有没有index.html或者直接就没有文件夹，没有先看看缺什么注意：下面只能给没有用淘宝镜像的用，cnpm不支持这个，还有请在你的blog的git根目录下使用 1npm audit fix 没有缺的组件的话就看看theme里面的部件是否齐全 找得到同网页名的就算齐全最后肯定没有初始化hexo分类子目录 1hexo new page &quot;xxx&quot; 然后再clean一下， generate一下 server测试一下，好了就可以再deploy。 总结：一定要看官方文档，一定要看官方文档，一定要看官方文档，重要的事情要说三遍。","link":"/2019/04/06/hexo%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"title":"git下载问题解决方案汇总","text":"大概率是firewall又升级了或者是国内服务器被撤掉了的原因 9年初开始git clone它突然就不香了，平时速度在3-8Byte晃动，想要clone一下体积稍稍大一些的项目就会各种fail exception 丢出来…展示一下收集找到的几种机制和解决方案。 ========================================================= 方法一 直通根源，代理/搭电梯vvvvvvvvvvvvv代理挂上代理 https.proxy + 你的代理服务器地址:端口网上搜搜免费proxy也是可以，不过最好自己捣鼓一个。阿里的web应用应该算性价比最高的一个了。 一步到位 1git config --global https.proxy https://127.0.0.1:1086取消代理 http和https要分别取消。 12git config --global --unset http.proxygit config --global --unset https.proxy搭电梯对本地的hosts进行添加直接地址省去Domain的寻址注意尽量使用有权限的账户windowshosts 位于 c:\\windows\\system32\\drivers\\etclinux 和 mac位于 /etc 内 ip查找方法：一般用nslookup 12nslookup github.global.ssl.fastly.Netnslookup github.com 或者上ipip去查询对应区域内github中转域名的ip 然后修改hosts一般里面是只有注释的 12151.101.76.249 http://global-ssl.fastly.net192.30.255.113 http://github.com修改完了就可以刷新一下DNS缓存，以防走第一次DNS找到的老路 linux： sudo /etc/init.d/networking restart mac: sudo killall -HUP mDNSResponder windows： ipconfig /flushdns ============================================================= 方法二 修改git本身的耐性1.提高缓存上限 提高缓存上限能解决 curl 56的问题 1git config http.postBuffer 524288000` 执行上面命令如果依旧clone失败，考虑可能原因2：网络下载速度缓慢 解决方法：命令行输入 或者是去 .gitconfig（在当前用户的根目录下）直接修改 2.下载速度下限限制解除 这个可能解决curl 18 12git config --global http.lowSpeedLimit 0git config --global http.lowSpeedTime 999999 如果依旧clone失败，则首先浅层clone，然后更新远程库到本地当然如果只是使用可以只浅拷贝1就够了不用fetch 12git clone --depth=1 http://gitlab.xxx.cn/yyy/zzz.gitgit fetch --unshallow 3.压缩配置(有可能起反作用，请最后再尝试和2一起组合使用) git config --global core.compression -1 如果还是不行，最后方法 终极方法 利用某ee结尾的员工转存提高下载速率Gitee先在码云上注册帐号码云提供免费5g大小的空间足够百分之99的项目转存在容量不够的时候可以删除一些不必要的项目的使用码云的从gitlab 或github上导入项目功能先导入到gitee再从gitee的服务器直接clone下来码云：？？？就真工具人呗","link":"/2019/04/06/git%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB/"},{"title":"Hexo-insert-image","text":"这里引用音乐试试效果哟 [BiggestDreamer](https://johnsaunders99.github.io/download/&quot;和田光司 - The Biggest Dreamer(アレンジヴァージョン) (BONUS TRACK).mp3”)[夕阳的约定](https://johnSaunders99.github.io/download/&quot;折笠富美子 - 夕陽の約束(BDT Size).mp3”) 1.插入网络链接类图片：直接使用 就可以 2.插入本地图片插入本地图片需要修改博客根配置_config.yml配置文件的 post_asset_folder:true 使用插件达到插入本地图片，在根目录输入如下命令安装hexo图片插件： $ npm install hexo-asset-image --save 安装完毕后 new 一篇博客时/source/_posts文件夹内除了xxxx.md文件还有一个同名的xxxx文件夹，把图片放到文件夹里面就可以调用. 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：","link":"/2020/04/22/Hexo-insert-image/"},{"title":"图像识别学习日志——目标检测正负样本理解","text":"在做目标检测任务时对其中的正负样本不太清楚，看了很多资料，发现这篇博客解释的比较清晰，下面图片也出自上述博客。 ​ 以人脸识别为例，如果你的任务是识别教室中的人脸，那么负样本的选取应该是教室中的窗户、椅子、墙、人的身体、衣服颜色等等，而不是天空、月亮这些对本任务没有帮助的场景。当然，如果不确定应用环境，那么应该选取尽可能有不同光照不同环境的自然图像作为负样本。 ​ 个人理解的正样本就是任务所要检测的目标物，比如在人脸识别中不同种族年龄的人脸、不同表情的人脸、戴不同装饰的人脸等等情况下的人脸；而负样本则是目标物所处的不同背景(注意：此背景不包含人脸)，比如人脸会出现在不同环境中，街道、室内总之所有能想到的环境中都有可能出现人脸哈哈，负样本就是这些不包含人脸的图片，如果需要很多负样本，则可以把这些不包含人脸的图片裁剪成所需图片大小。 ​ 参考faster以及SSD两种检测框架中对于正负样本的选取准则，首先，检测问题中的正负样本并非人工标注的那些框框，而是程序中（网络）生成出来的ROI，也就是faster rcnn中的anchor boxes以及SSD中在不同分辨率的feature map中的默认框，这些框中的一部分被选为正样本，一部分被选为负样本，另外一部分被当作背景或者不参与运算。不同的框架有不同的策略，大致都是根据IOU的值，选取个阈值范围进行判定，在训练的过程中还需要注意均衡正负样本之间的比例。在fast的框架中，也是需要多SS算法生成的框框与GT框进行IOU的判断，进而选取正负样本，总之，正负样本都是针对于程序生成的框框而言，而非GT数据。 一个小技巧：在训练检测网络时，若已经训练出一个较好的检测器，在用它进行测试时，还会有一些误检，这时可以把误检的图像加入负样本中retrain检测网络，迭代次数越多则训练模型越好 ![英文原版](/图像识别学习日志——目标检测正负样本理解/how to set neg and pos samps.png)","link":"/2020/07/16/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%AD%A3%E8%B4%9F%E6%A0%B7%E6%9C%AC%E7%90%86%E8%A7%A3/"}],"tags":[],"categories":[]}